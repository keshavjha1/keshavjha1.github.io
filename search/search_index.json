{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Visionary Lead Software Engineer with 10.5 years of experience in delivering agile, robust, and transparent software solutions that meet evolving customer (Banking, Insurance and Telecom) needs. Harnessed the power of cloud-native and distributed systems, transformed monolithic structures into scalable microservices, driving faster feature delivery. Seamlessly leading the relocation of a development center, thrives on pushing boundaries and embracing the transformative potential of cloud-native solutions. From crafting stunning UI experiences using cutting-edge React and Angular frameworks to ensure B2B application resilience &amp; security, relentlessly pursue excellence. Immersing in the entire software lifecycle and collaborating within cross-functional teams, bring unparalleled value to projects. </p>"},{"location":"Artificial%20intelligence/LargeLangugageModel/","title":"LargeLangugageModel","text":"<p>vvv</p>"},{"location":"Industry-Trends/Full-stack-obsrvability%20copy/","title":"Full stack observability","text":"<p>FSO at cisco is defined by three primary pillars: visibility, insights, and actions. Our further understanding of the landscape is as follows:</p> <p>Our approach to Full-Stack Observability builds on continuous and tightly integrated monitoring. We provide Visibility, Insights and Actions across the Full Stack, from the API all the way to the bare metal, across all data types. We do this for traditional and cloud native applications and across hybrid and multi cloud environments. We acknowledge that 95% of our customers have a mix of the traditional and cloud native apps and we support these use cases. We tie our insights back to the business context: customers can know there is a problem, why the problem occurred and what to tackle immediately. We help optimize for performance, cost, security, and environmental impact (carbon intensity).</p> <p>ffff dddjj</p>"},{"location":"Industry-Trends/Full-stack-obsrvability/","title":"Full stack observability","text":"<p>FSO at cisco is defined by three primary pillars: visibility, insights, and actions. Our further understanding of the landscape is as follows:</p> <p>Our approach to Full-Stack Observability builds on continuous and tightly integrated monitoring. We provide Visibility, Insights and Actions across the Full Stack, from the API all the way to the bare metal, across all data types. We do this for traditional and cloud native applications and across hybrid and multi cloud environments. We acknowledge that 95% of our customers have a mix of the traditional and cloud native apps and we support these use cases. We tie our insights back to the business context: customers can know there is a problem, why the problem occurred and what to tackle immediately. We help optimize for performance, cost, security, and environmental impact (carbon intensity).</p> <p>ffff dddjj</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/09/12/excluding-content-from-search/","title":"Excluding content from search","text":"<p>The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/","title":"Excluding content from search","text":"<p>The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control.</p> <p>Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality.</p> <p>The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#prior-art","title":"Prior art","text":"<p>MkDocs has a rich and thriving ecosystem of plugins, and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with:</p> <pre><code>pip install mkdocs-exclude-search\n</code></pre> <p>How it works: the plugin post-processes the <code>search_index.json</code> file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to <code>mkdocs.yml</code>. An example:</p> <pre><code>plugins:\n  - search\n  - exclude-search:\n      exclude:\n        - page.md\n        - page.md#section\n        - directory/*\n        - /*/page.md\n</code></pre> <p>It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides:</p> <ol> <li> <p>Exclusion patterns and content are not co-located: exclusion patterns     need to be defined in <code>mkdocs.yml</code>, and not as part of the respective     document or section to be excluded. This might result in stale exclusion     patterns, leading to unintended behavior:</p> <ul> <li> <p>When a headline is changed, its slug (permalink) also changes, which might   suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo   in a headline.</p> </li> <li> <p>As exclusion patterns support the use of wildcards, different authors   might overwrite each other's patterns without any immediate feedback since   the plugin does only report the number of excluded documents \u2013 not what   has been excluded.[^1]</p> </li> </ul> </li> </ol> <p>[^1]:     When the log level is set to <code>DEBUG</code>, the plugin will report exactly which     pages and sections have been excluded from the search index, but MkDocs will     now flood the terminal with debug output from its core and other plugins.</p> <ol> <li>Exclusion control might be too coarse: The mkdocs-exclude-search     plugin only allows for the exclusion of pages and sections. It's not     possible to exclude parts of a section, e.g., content that is irrelevant     to search but must be included as part of the documentation.</li> </ol>"},{"location":"blog/2021/09/26/excluding-content-from-search/#whats-new","title":"What's new?","text":"<p>The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists. Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-pages","title":"Excluding pages","text":"<p>An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\n# Document title\n...\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-sections","title":"Excluding sections","text":"<p>If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called <code>data-search-exclude</code> at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered:</p> <p>=== \":octicons-file-code-16: <code>docs/page.md</code>\"</p> <pre><code>``` markdown\n# Document title\n\n## Section 1\n\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\n\nThe content of this section is excluded\n```\n</code></pre> <p>=== \":octicons-codescan-16: <code>search_index.json</code>\"</p> <pre><code>``` json\n{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"\",\n      \"title\":\"Document title\"\n    },\n    {\n      \"location\":\"page/#section-1\",\n      \"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n      \"title\":\"Section 1\"\n    }\n  ]\n}\n```\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-blocks","title":"Excluding blocks","text":"<p>If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension:</p> <p>=== \":octicons-file-code-16: <code>docs/page.md</code>\"</p> <pre><code>``` markdown\n# Document title\n\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n```\n</code></pre> <p>=== \":octicons-codescan-16: <code>search_index.json</code>\"</p> <pre><code>``` json\n{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n      \"title\":\"Document title\"\n    },\n  ]\n}\n```\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#conclusion","title":"Conclusion","text":"<p>The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#quick-start","title":"Quick start","text":""},{"location":"blog/2022/09/12/blog-support-just-landed/#setting-up-insiders","title":"Setting up Insiders","text":"<p>Before we can start bootstrapping a blog and write our first post, we need to set up Insiders, since the built-in blog plugin is currently reserved to sponsors. Without the funds this project receives through sponsorships, this plugin wouldn't exist. Three steps are necessary:</p> <ol> <li>Subscribe to a monthly sponsorship</li> <li>Create a personal access token</li> <li>Install Insiders</li> </ol>"},{"location":"blog/2022/09/12/blog-support-just-landed/#creating-a-standalone-blog","title":"Creating a standalone blog","text":"<p>After Insiders is installed, you can bootstrap a new project using the <code>mkdocs</code> executable:</p> <pre><code>mkdocs new .\n</code></pre> <p>This will create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/#configuration","title":"Configuration","text":"<p>In this article, we're going to build a standalone blog, which means that the blog lives at the root of your project. For this reason, open <code>mkdocs.yml</code>, and replace its contents with:</p> <pre><code>site_name: My Blog\ntheme:\n  name: material\n  features:\n    - navigation.sections\nplugins:\n  - meta\n  - blog:\n      blog_dir: . # (1)!\n  - search\n  - tags\nnav:\n  - index.md\n</code></pre> <ol> <li>This is the important part \u2013 we're hosting the blog at the root of the     project, and not in a subdirectory. For more information, see the     <code>blog_dir</code> configuration option.</li> </ol>"},{"location":"blog/2022/09/12/blog-support-just-landed/#blog-setup","title":"Blog setup","text":"<p>The blog index page lives in <code>docs/index.md</code>. This page was pre-filled by MkDocs with some content, so we're going to replace it with what we need to bootstrap the blog:</p> <pre><code># Blog\n</code></pre> <p>That's it.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#writing-your-first-post","title":"Writing your first post","text":"<p>Now that we have set up the built-in blog plugin, we can start writing our first post. All blog posts are written with the exact same Markdown flavor as already included with Material for MkDocs. First, create a folder called <code>posts</code> with a file called <code>hello-world.md</code>:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 posts/\n\u2502  \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Then, open up <code>hello-world.md</code>, and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2022-01-31\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec\nmaximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula\nerat, ut egestas tellus eros at risus. In hac habitasse platea dictumst.\nPhasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris\nNam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in\nsem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac\nmetus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.\n\n&lt;!-- more --&gt;\n\nDonec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum\nmassa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam\ntempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet\nmolestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.\n\nNunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat.\nIn auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc\npharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis\narcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue.\nIn velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque\ntellus id elit ultricies, vel finibus erat cursus.\n</code></pre> <ol> <li>If you mark a post as a draft, a red marker appears next to the post date      on index pages. When the site is built, drafts are not included in the      output. This behavior can be changed, e.g. for rendering drafts when      building deploy previews.</li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you:</p> <p></p> <p>However, this is just the start. The built-in blog plugin packs a lot of functionality needed in day-to-day blogging. Visit the documentation of the plugin to learn about the following topics:</p>   - [Adding an excerpt] - [Adding authors] - [Adding categories] - [Adding tags] - [Adding related links] - [Linking from and to posts] - [Setting the reading time] - [Setting defaults]   <p>Additionally, the built-in blog plugin has dozens of configuration options which allow for fine-tuning the output. You can configure post slugs, general behavior and much more.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#whats-next","title":"What's next?","text":"<p>Getting basic blogging support out the door was quite a challenge \u2013 the built-in blog plugin is probably the biggest release this year and already packs a lot of functionality. However, Material for MkDocs is used in many different contexts, which is why we'd expect to iterate, as always.</p> <p>Some ideas already proposed by users:</p> <ul> <li> <p>Blog series: Authors should be able to create so called blog series and   assign posts to a blog series using simple identifiers. For each post that is   part of a series, a list with links to all other posts should be included in   the post's content.</p> </li> <li> <p>Author indexes: Besides archive and category indexes, authors should    be able to create per-author indexes, which list all posts linked to an   author. Additionally, a profile should be created for each author and linked   from posts.</p> </li> <li> <p>Social share buttons: It should be easy to share blog posts via social   media or other ways. For this reason, it should be possible to automatically   include social sharing buttons with each post.</p> </li> </ul> <p>What's still missing from the brand new built-in blog plugin? Feel free to share your ideas in the comments. Together, we can build one of the best modern engines for technical blogging!</p>"}]}